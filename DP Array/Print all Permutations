Time Complexity: O(n! * n)
Space Complexity: O(n * n!)

class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        func(nums,ans,0);
        return ans;
    }
    public void func(int[] nums,List<List<Integer>> ans, int index){
        if(index==nums.length){
            List<Integer> ds = new ArrayList<>();
            for(int i=0;i<nums.length;i++){
                ds.add(nums[i]);
                        }
            ans.add(new ArrayList<>(ds));
            return;
        }

        for(int i=index;i<nums.length;i++){
            swap(nums, i, index);
            func(nums,ans,index+1);
            swap(nums, i, index);

        }
    }

    public void swap(int[] nums, int i, int j){
        int temp=nums[i];
        nums[i]=nums[j];
        nums[j]= temp;
    }
}
