  /*class Solution{ //TC:(2^N) and SC:O(n)
   static Boolean func(int N, int arr[], int sum, int index){
        if (index==arr.length && sum!=0){
            return false;
        }
        if(sum==0){
            return true;
        }
        boolean pick =func(N,arr,sum-arr[index],index+1);
        boolean notpick = func(N,arr,sum,index+1);
        
        return pick || notpick;
        
    }

    static Boolean isSubsetSum(int N, int arr[], int sum){
        // code here
        boolean res = func(N,arr,sum,0);
        return res;
    }
}*/

class Solution { //TC:O(n*sum) and sc: O(n*sum)

    static Boolean isSubsetSum(int N, int arr[], int sum) {
        int n = arr.length;
        boolean[][] dp = new boolean[n + 1][sum + 1];
        
        // Initialize: There is always a subset with sum 0 (the empty subset)
        for (int i = 0; i <= n; i++) {
            dp[i][0] = true;
        }
        
        // Fill the DP table
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= sum; j++) {
                if (arr[i - 1] <= j) {
                    dp[i][j] = dp[i - 1][j] || dp[i - 1][j - arr[i - 1]];
                } else {
                    dp[i][j] = dp[i - 1][j];
                }
            }
        }
-----------------------------------------------------

class Solution {
    // Function to return all subset sums
    ArrayList<Integer> subsetSums(ArrayList<Integer> arr, int n) {
        ArrayList<Integer> result = new ArrayList<>();
        calculateSubsetSums(arr, 0, 0, result);
        Collections.sort(result);  // Sorting the result if required
        return result;
    }

    // Recursive function to calculate subset sums
    void calculateSubsetSums(ArrayList<Integer> arr, int index, int currentSum, ArrayList<Integer> result) {
        // Base case: if we've processed all elements, add the current sum to the result
        if (index == arr.size()) {
            result.add(currentSum);
            return;
        }

        // Two choices for each element:
        // 1. Include the current element in the sum
        calculateSubsetSums(arr, index + 1, currentSum + arr.get(index), result);

        // 2. Exclude the current element from the sum
        calculateSubsetSums(arr, index + 1, currentSum, result);
    }}
        
        return dp[n][sum];
    }
}

