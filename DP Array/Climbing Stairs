TC:  O(2^n)
SC: O(n)
class Solution {
    public int climbStairs(int n) {
        return climb(n);
    }

    // Recursive function to calculate the number of ways to reach the nth step
    private int climb(int n) {
        // Base cases
        if (n == 0) return 1;
        if (n == 1) return 1;

        // Recursive case: number of ways to reach step n is the sum of ways to reach step (n-1) and step (n-2)
        return climb(n - 1) + climb(n - 2);
    }
}
----------------------------------------------------------------------------------------------------
Time Complexity: O(n)
Space Complexity: O(n)

class Solution {
    public int climbStairs(int n) {
        int[] dp = new int[n+1];
        if(n==0||n==1){
            return 1;
        }
        dp[0] = 1;
        dp[1] = 1;
        for(int i=2; i<=n;i++){
            dp[i] = dp[i-1] + dp[i-2];
        }
        return dp[n];
    }

}
