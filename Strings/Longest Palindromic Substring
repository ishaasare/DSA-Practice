2 APPROACHES: BRUTE FORCE & EXPAND METHOD & MANACHER METHOD but we dont know that O(n)
//TC:O(n^3)
//SC:O(n)
/*class Solution {
    public String longestPalindrome(String s) {
        if(s.length()==0 || s==null){
            return "";
        }
        String longest="";
        for(int i=0;i<s.length();i++){
            for(int j = i; j<s.length(); j++){
                String substr = s.substring(i,j+1);
                if(check(substr)){
                    if(substr.length() > longest.length()){
                        longest = substr;
                    }
                }
            }
        }
        return longest;
    }
    public boolean check(String s){
        int left = 0;
        int right = s.length()-1;
        while(left<right){
            if(s.charAt(left)!=s.charAt(right)){
                return false;
            }
            left++;
            right--;
        }
        return true;
    }
}*/
-----------------------------------------------------------------------------------------------
//TC:O(n^2)
//SC:O(n)

class Solution{
    public String longestPalindrome(String s) {
        if(s.length()==0|| s==null){
            return "";

        }
        int n = s.length();
        String longest = s.substring(0,1);
        for(int i = 0; i<n; i++){
            String odd = expand(s, i,i);
            String even = expand(s,i,i+1);
            if(odd.length()>longest.length()){
                longest=odd;
            }
            if(even.length()>longest.length()){
                longest=even;
            }
        }

        return longest;
    }
    public String expand(String s,int left, int right){
        int n = s.length();
        while(left>=0 && right<n && s.charAt(left)==s.charAt(right) ){
            right++;
            left--;

            }
            return s.substring(left+1, right);
        }
    }
