TC:O(n)
SC:O(1)
public ListNode removeNthFromEnd(ListNode head, int n) {

        // Initialize two pointers
        ListNode slow = head;
        ListNode fast = head;
        // Move fast n steps ahead
        for (int i = 0; i < n; i++) {
            fast = fast.next;
        }
        // If fast is null, it means n is equal to the length of the list,
        // so we need to remove the head
        if (fast == null) {
            return head.next;  // Remove the head node
        }
        // Move both pointers until fast reaches the end
        while (fast.next != null) {
            slow = slow.next;
            fast = fast.next;
        }    
        // Remove the N-th node from the end
        slow.next = slow.next.next;     
        return head;
    }
}
